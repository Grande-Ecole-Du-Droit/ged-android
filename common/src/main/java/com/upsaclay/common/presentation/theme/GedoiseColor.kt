package com.upsaclay.common.presentation.theme

import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.colorResource

object GedoiseColor {
    // for light theme
    val primaryLight = Color(0xFF434C64)
    val onPrimaryLight = Color(0xFFFFFFFF)
    val primaryContainerLight = Color(0xFF67708A)
    val onPrimaryContainerLight = Color(0xFFFFFFFF)
    val secondaryLight = Color(0xFF5B5E69)
    val onSecondaryLight = Color(0xFFFFFFFF)
    val secondaryContainerLight = Color(0xFFE1E3F0)
    val onSecondaryContainerLight = Color(0xFF454853)
    val tertiaryLight = Color(0xFF5E4459)
    val onTertiaryLight = Color(0xFFFFFFFF)
    val tertiaryContainerLight = Color(0xFF85687E)
    val onTertiaryContainerLight = Color(0xFFFFFFFF)
    val errorLight = Color(0xFFBA1A1A)
    val onErrorLight = Color(0xFFFFFFFF)
    val errorContainerLight = Color(0xFFFFDAD6)
    val onErrorContainerLight = Color(0xFF410002)
    val backgroundLight = Color(0xFFFBF8FB)
    val onBackgroundLight = Color(0xFF1B1B1D)
    val surfaceLight = Color(0xFFFBF8FB)
    val onSurfaceLight = Color(0xFF1B1B1D)
    val surfaceVariantLight = Color(0xFFE2E2EA)
    val onSurfaceVariantLight = Color(0xFF45464D)
    val outlineLight = Color(0xFF76777E)
    val outlineVariantLight = Color(0xFFC6C6CD)
    val scrimLight = Color(0xFF000000)
    val inverseSurfaceLight = Color(0xFF303032)
    val inverseOnSurfaceLight = Color(0xFFF3F0F2)
    val inversePrimaryLight = Color(0xFFBDC6E3)
    val surfaceDimLight = Color(0xFFDCD9DB)
    val surfaceBrightLight = Color(0xFFFBF8FB)
    val surfaceContainerLowestLight = Color(0xFFFFFFFF)
    val surfaceContainerLowLight = Color(0xFFF6F3F5)
    val surfaceContainerLight = Color(0xFFF0EDEF)
    val surfaceContainerHighLight = Color(0xFFEAE7E9)
    val surfaceContainerHighestLight = Color(0xFFE4E2E4)
    // for dark theme
    val primaryDark = Color(0xFFBDC6E3)
    val onPrimaryDark = Color(0xFF273047)
    val primaryContainerDark = Color(0xFF5E6780)
    val onPrimaryContainerDark = Color(0xFFFFFFFF)
    val secondaryDark = Color(0xFFC4C6D3)
    val onSecondaryDark = Color(0xFF2D303A)
    val secondaryContainerDark = Color(0xFF3A3D47)
    val onSecondaryContainerDark = Color(0xFFCED0DD)
    val tertiaryDark = Color(0xFFDFBCD5)
    val onTertiaryDark = Color(0xFF40293C)
    val tertiaryContainerDark = Color(0xFF7B5F75)
    val onTertiaryContainerDark = Color(0xFFFFFFFF)
    val errorDark = Color(0xFFFFB4AB)
    val onErrorDark = Color(0xFF690005)
    val errorContainerDark = Color(0xFF93000A)
    val onErrorContainerDark = Color(0xFFFFDAD6)
    val backgroundDark = Color(0xFF131315)
    val onBackgroundDark = Color(0xFFE4E2E4)
    val surfaceDark = Color(0xFF131315)
    val onSurfaceDark = Color(0xFFE4E2E4)
    val surfaceVariantDark = Color(0xFF45464D)
    val onSurfaceVariantDark = Color(0xFFC6C6CD)
    val outlineDark = Color(0xFF909097)
    val outlineVariantDark = Color(0xFF45464D)
    val scrimDark = Color(0xFF000000)
    val inverseSurfaceDark = Color(0xFFE4E2E4)
    val inverseOnSurfaceDark = Color(0xFF303032)
    val inversePrimaryDark = Color(0xFF555E77)
    val surfaceDimDark = Color(0xFF131315)
    val surfaceBrightDark = Color(0xFF39393B)
    val surfaceContainerLowestDark = Color(0xFF0E0E10)
    val surfaceContainerLowDark = Color(0xFF1B1B1D)
    val surfaceContainerDark = Color(0xFF1F1F21)
    val surfaceContainerHighDark = Color(0xFF2A2A2C)
    val surfaceContainerHighestDark = Color(0xFF353436)


    // il y a d'autres thèmes générés par le site matherial, on peut les utiliser si cela est souhaité
}